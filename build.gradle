buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.+')
        classpath 'com.bmuschko:gradle-cargo-plugin:2.3'
    }
}

plugins {
id 'org.sonarqube' version "2.6"
}

version = currentVersion

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.bmuschko.cargo'

dependencies {
    testCompile "junit:junit:4.12"
    compile "javax:javaee-api:8.0"
    compile "javax.persistence:javax.persistence-api:2.2"
    compile "com.sun.faces:jsf-api:2.2.16"
    compile "com.sun.faces:jsf-impl:2.2.16"
    compile "org.glassfish.jersey.inject:jersey-hk2:2.26"
    compile group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.1'

    def cargoVersion = '1.4.5'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
          "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

artifactory {
    contextUrl = 'http://localhost:8081/artifactory'
    publish {
        repository {
            repoKey = 'libs-snapshot-local' // The Artifactory repository key to publish to
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
}

cargo {
    containerId = 'glassfish5x'
    port = 8180

    deployable {
        file = war.archivePath
    }
    
    remote {
        hostname = 'localhost'
        username = 'admin'
        password = 'b8155100'
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'com.github.fontys.App'
    }
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}
