buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.+')
        classpath 'com.bmuschko:gradle-cargo-plugin:2.3'
    }
}

plugins {
    id 'org.sonarqube' version "2.6"
}

version = currentVersion

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: 'com.bmuschko.cargo'

dependencies {
    testCompile "junit:junit:4.12"
    compile "javax:javaee-api:8.0"
    compile "javax.persistence:javax.persistence-api:2.2"
    compile "com.sun.faces:jsf-api:2.2.16"
    compile "com.sun.faces:jsf-impl:2.2.16"
    compile "org.glassfish.jersey.inject:jersey-hk2:2.26"
    compile group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.7.1'

    // JSR-88
    compile group: 'org.glassfish.admin', name: 'admin-cli', version: '10.0-b28'
    compile group: 'org.glassfish.hk2', name: 'hk2-core', version: '2.5.0-b61'
    compile group: 'org.glassfish.hk2', name: 'auto-depends', version: '2.0.5'
    compile group: 'org.glassfish.main.common', name: 'common-util', version: '5.0'
    compile group: 'org.glassfish.common', name: 'glassfish-api', version: '10.0.422'
    compile group: 'org.glassfish.deployment', name: 'deployment-common', version: '10.0-b28'


    cargo "org.codehaus.cargo:cargo-core-uberjar:1.6.6",
            "org.codehaus.cargo:cargo-ant:1.6.6"
}

cargo {
    containerId = 'glassfish4x'
    port = 8180

    deployable {
        context = 'MyContext'
    }

    remote {
        hostname = 'localhost'
        username = 'admin'
        password = '0abc2e6a'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

artifactory {
    contextUrl = 'http://localhost:8081/artifactory'
    publish {
        repository {
            repoKey = 'libs-snapshot-local' // The Artifactory repository key to publish to
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
    resolve {
        repoKey = 'jcenter'
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.github.fontys.App'
    }
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

/*
task createDevelopmentWar(type: War, dependsOn: classes) {
    archiveName "webapi-test.war"
    destinationDir = file("$buildDir/dist")
}

class RemoteContainer {
    String name
    String container
    String hostname
    Integer port
    String username
    String password
    String purpose
}

def remoteContainers = [new RemoteContainer(
        name: 'glassfish5',
        container: 'glassfish5x',
        hostname: 'localhost',
        port: 8180,
        username: 'admin',
        password: '0abc2e6a',
        purpose: 'development'
)]

apply plugin: 'com.bmuschko.cargo-base'

remoteContainers.each { config ->
    task "deployRemote${config.name.capitalize()}"(type: com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote) {
        description = "Deploys WAR to remote Glassfish5 '${config.name}'."
        containerId = config.container
        hostname = config.hostname
        port = config.port
        username = config.username
        password = config.password
        context = "webapi"
        dependsOn = [createDevelopmentWar]
    }
}

task deployToAllRemoteGlassFishes{
    dependsOn remoteContainers.collect { "deployRemote${it.name.capitalize()}" }
    description = 'Deploys to all remote GlassFish containers.'
    group = 'deployment'
}
*/




